// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TerraVillageAPI.Models;

#nullable disable

namespace TerraVillageAPI.Migrations
{
    [DbContext(typeof(TerraVillageDBContext))]
    [Migration("20230802144538_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AchievementUser", b =>
                {
                    b.Property<int>("AchievementsID")
                        .HasColumnType("int");

                    b.Property<int>("UsersID")
                        .HasColumnType("int");

                    b.HasKey("AchievementsID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("UserAchievement", (string)null);
                });

            modelBuilder.Entity("BuildingVillage", b =>
                {
                    b.Property<int>("BuildingsID")
                        .HasColumnType("int");

                    b.Property<int>("VillagesID")
                        .HasColumnType("int");

                    b.HasKey("BuildingsID", "VillagesID");

                    b.HasIndex("VillagesID");

                    b.ToTable("VillageBuildings", (string)null);
                });

            modelBuilder.Entity("DamageEffectEnemy", b =>
                {
                    b.Property<int>("DamageEffectsID")
                        .HasColumnType("int");

                    b.Property<int>("EnemiesID")
                        .HasColumnType("int");

                    b.HasKey("DamageEffectsID", "EnemiesID");

                    b.HasIndex("EnemiesID");

                    b.ToTable("EnemyDamageEffects", (string)null);
                });

            modelBuilder.Entity("EnemyItem", b =>
                {
                    b.Property<int>("DropTableID")
                        .HasColumnType("int");

                    b.Property<int>("EnemyDropTablesID")
                        .HasColumnType("int");

                    b.HasKey("DropTableID", "EnemyDropTablesID");

                    b.HasIndex("EnemyDropTablesID");

                    b.ToTable("EnemyDropTables", (string)null);
                });

            modelBuilder.Entity("InventoryItem", b =>
                {
                    b.Property<int>("ItemsID")
                        .HasColumnType("int");

                    b.Property<int>("UserInventoriesID")
                        .HasColumnType("int");

                    b.HasKey("ItemsID", "UserInventoriesID");

                    b.HasIndex("UserInventoriesID");

                    b.ToTable("InventoryItems", (string)null);
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Achievement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Achievements", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Gather your first set of resources.",
                            Name = "Novice Gatherer",
                            Score = 10
                        },
                        new
                        {
                            ID = 2,
                            Description = "Mine a total of 1,000 minerals.",
                            Name = "Master Miner",
                            Score = 50
                        },
                        new
                        {
                            ID = 3,
                            Description = "Catch 100 fish from different fishing spots.",
                            Name = "Fishing Enthusiast",
                            Score = 30
                        },
                        new
                        {
                            ID = 4,
                            Description = "Harvest a bountiful crop from your farm.",
                            Name = "Green Thumb",
                            Score = 20
                        },
                        new
                        {
                            ID = 5,
                            Description = "Accumulate 10,000 gold coins in your village's treasury.",
                            Name = "Wealthy Merchant",
                            Score = 100
                        },
                        new
                        {
                            ID = 6,
                            Description = "Defeat 100 enemies in combat.",
                            Name = "Monster Slayer",
                            Score = 60
                        },
                        new
                        {
                            ID = 7,
                            Description = "Upgrade all buildings to their maximum level in your village.",
                            Name = "Village Builder",
                            Score = 150
                        },
                        new
                        {
                            ID = 8,
                            Description = "Visit and unlock all locations on the game map.",
                            Name = "Explorer Extraordinaire",
                            Score = 120
                        },
                        new
                        {
                            ID = 9,
                            Description = "Craft a legendary weapon or armor.",
                            Name = "Legendary Crafter",
                            Score = 200
                        },
                        new
                        {
                            ID = 10,
                            Description = "Help 50 villagers with their quests or needs.",
                            Name = "Community Leader",
                            Score = 80
                        },
                        new
                        {
                            ID = 11,
                            Description = "Discover and collect all hidden treasures in the game world.",
                            Name = "Treasure Hunter",
                            Score = 180
                        },
                        new
                        {
                            ID = 12,
                            Description = "Win 10 consecutive battles in the village arena.",
                            Name = "Champion of the Arena",
                            Score = 100
                        },
                        new
                        {
                            ID = 13,
                            Description = "Brew 50 different potions and elixirs.",
                            Name = "Alchemist Apprentice",
                            Score = 70
                        },
                        new
                        {
                            ID = 14,
                            Description = "Trade with all neighboring villages and unlock exclusive resources.",
                            Name = "Master of Trade",
                            Score = 110
                        },
                        new
                        {
                            ID = 15,
                            Description = "Achieve the highest level of prosperity and renown for your village.",
                            Name = "Legendary Village",
                            Score = 250
                        });
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Building", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BuildingType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConstructionCompletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConstructionTime")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUnderConstruction")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PopulationCapacity")
                        .HasColumnType("int");

                    b.Property<string>("RequiredBuildings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredPlayerLevel")
                        .HasColumnType("int");

                    b.Property<int?>("ResourceCapacity")
                        .HasColumnType("int");

                    b.Property<int?>("ResourceProduction")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeCost")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Buildings", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BuildingType = 0,
                            ConstructionTime = 3600,
                            Description = "A House.",
                            IsUnderConstruction = false,
                            Level = 1,
                            MaxLevel = 5,
                            Name = "House",
                            PopulationCapacity = 4,
                            UpgradeCost = 100
                        },
                        new
                        {
                            ID = 2,
                            BuildingType = 1,
                            ConstructionTime = 3600,
                            Description = "A farm.",
                            IsUnderConstruction = false,
                            Level = 1,
                            MaxLevel = 5,
                            Name = "Farm",
                            ResourceProduction = 100,
                            UpgradeCost = 100
                        });
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Clan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Clans", (string)null);
                });

            modelBuilder.Entity("TerraVillageAPI.Models.DamageEffect", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Chance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("EffectType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Potency")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("DamageEffects", (string)null);
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Enemy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Defence")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxDamage")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("int");

                    b.Property<int>("MinDamage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RewardXP")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Enemies", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Defence = 5,
                            Description = "This is not a golbin",
                            Health = 10,
                            Level = 1,
                            MaxDamage = 2,
                            MaxHealth = 10,
                            MinDamage = 1,
                            Name = "Goblin",
                            RewardXP = 5
                        },
                        new
                        {
                            ID = 2,
                            Defence = 7,
                            Description = "Boney bonezz",
                            Health = 15,
                            Level = 3,
                            MaxDamage = 3,
                            MaxHealth = 15,
                            MinDamage = 1,
                            Name = "Skeleton",
                            RewardXP = 6
                        });
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Inventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("InventorySize")
                        .HasColumnType("int");

                    b.Property<int>("MaxStackSize")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Inventories", (string)null);
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Items");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Settings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllowFriendRequests")
                        .HasColumnType("bit");

                    b.Property<int>("CombatDifficulty")
                        .HasColumnType("int");

                    b.Property<bool>("DisableTutorials")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<int>("OnlineStatus")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Settings", (string)null);
                });

            modelBuilder.Entity("TerraVillageAPI.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AchievementScore")
                        .HasColumnType("int");

                    b.Property<int?>("ClanID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsClanOwner")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClanID");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Village", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Villages", (string)null);
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<int>("FriendsID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FriendsID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserFriends", (string)null);
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Armor", b =>
                {
                    b.HasBaseType("TerraVillageAPI.Models.Item");

                    b.Property<int>("ArmorSlot")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.ToTable("Armors", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 7,
                            Amount = 1,
                            Description = "A common platebody made out of bronze",
                            Name = "Bronze platebody",
                            Rarity = 0,
                            Value = 20,
                            ArmorSlot = 1,
                            Defense = 10,
                            Material = 3
                        },
                        new
                        {
                            ID = 8,
                            Amount = 1,
                            Description = "Common platelegs made out of bronze",
                            Name = "Bronze platelegs",
                            Rarity = 0,
                            Value = 18,
                            ArmorSlot = 3,
                            Defense = 8,
                            Material = 3
                        },
                        new
                        {
                            ID = 9,
                            Amount = 1,
                            Description = "A common helm made out of bronze",
                            Name = "Bronze helm",
                            Rarity = 0,
                            Value = 9,
                            ArmorSlot = 0,
                            Defense = 5,
                            Material = 3
                        },
                        new
                        {
                            ID = 10,
                            Amount = 1,
                            Description = "Common gloves made out of bronze",
                            Name = "Bronze gloves",
                            Rarity = 0,
                            Value = 7,
                            ArmorSlot = 2,
                            Defense = 2,
                            Material = 3
                        },
                        new
                        {
                            ID = 11,
                            Amount = 1,
                            Description = "Common boots made out of bronze",
                            Name = "Bronze boots",
                            Rarity = 0,
                            Value = 7,
                            ArmorSlot = 4,
                            Defense = 2,
                            Material = 3
                        });
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Consumable", b =>
                {
                    b.HasBaseType("TerraVillageAPI.Models.Item");

                    b.Property<int?>("EffectID")
                        .HasColumnType("int");

                    b.Property<int>("Potency")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasIndex("EffectID");

                    b.ToTable("Consumables", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 12,
                            Amount = 1,
                            Description = "Weak potion that gives you some health",
                            Name = "Minor health potion",
                            Rarity = 0,
                            Value = 15,
                            Potency = 10,
                            Type = 0
                        },
                        new
                        {
                            ID = 13,
                            Amount = 1,
                            Description = "Major potion that gives you a lot of health",
                            Name = "Major health potion",
                            Rarity = 2,
                            Value = 125,
                            Potency = 100,
                            Type = 0
                        },
                        new
                        {
                            ID = 14,
                            Amount = 1,
                            Description = "Summons a storm upon your enemies",
                            Name = "Storm scroll",
                            Rarity = 0,
                            Value = 50,
                            Potency = 8,
                            Type = 1
                        });
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Weapon", b =>
                {
                    b.HasBaseType("TerraVillageAPI.Models.Item");

                    b.Property<int>("ActionCost")
                        .HasColumnType("int");

                    b.Property<int?>("DamageEffectID")
                        .HasColumnType("int");

                    b.Property<int>("Durability")
                        .HasColumnType("int");

                    b.Property<bool>("IsTwoHanded")
                        .HasColumnType("bit");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<int>("MaxDamage")
                        .HasColumnType("int");

                    b.Property<int>("MinDamage")
                        .HasColumnType("int");

                    b.Property<int>("WeaponType")
                        .HasColumnType("int");

                    b.HasIndex("DamageEffectID");

                    b.ToTable("Weapons", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Amount = 1,
                            Description = "A basic sword made out of bronze",
                            Name = "Bronze Sword",
                            Rarity = 0,
                            Value = 6,
                            ActionCost = 1,
                            Durability = 100,
                            IsTwoHanded = false,
                            Material = 3,
                            MaxDamage = 5,
                            MinDamage = 1,
                            WeaponType = 0
                        },
                        new
                        {
                            ID = 2,
                            Amount = 1,
                            Description = "A basic bow made out of wood",
                            Name = "Wooden Bow",
                            Rarity = 0,
                            Value = 8,
                            ActionCost = 2,
                            Durability = 80,
                            IsTwoHanded = true,
                            Material = 0,
                            MaxDamage = 6,
                            MinDamage = 2,
                            WeaponType = 8
                        },
                        new
                        {
                            ID = 3,
                            Amount = 1,
                            Description = "A sharp dagger made of silver",
                            Name = "Silver Dagger",
                            Rarity = 1,
                            Value = 15,
                            ActionCost = 1,
                            Durability = 60,
                            IsTwoHanded = false,
                            Material = 5,
                            MaxDamage = 7,
                            MinDamage = 3,
                            WeaponType = 3
                        },
                        new
                        {
                            ID = 5,
                            Amount = 1,
                            Description = "A magical staff made of mithril",
                            Name = "Mithril Staff",
                            Rarity = 3,
                            Value = 100,
                            ActionCost = 2,
                            Durability = 120,
                            IsTwoHanded = true,
                            Material = 7,
                            MaxDamage = 12,
                            MinDamage = 5,
                            WeaponType = 11
                        },
                        new
                        {
                            ID = 6,
                            Amount = 1,
                            Description = "A legendary rapier crafted from dragon scales",
                            Name = "Dragon Scale Rapier",
                            Rarity = 4,
                            Value = 1000,
                            ActionCost = 1,
                            Durability = 200,
                            IsTwoHanded = false,
                            Material = 9,
                            MaxDamage = 20,
                            MinDamage = 10,
                            WeaponType = 6
                        });
                });

            modelBuilder.Entity("AchievementUser", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.Achievement", null)
                        .WithMany()
                        .HasForeignKey("AchievementsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerraVillageAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuildingVillage", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.Building", null)
                        .WithMany()
                        .HasForeignKey("BuildingsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerraVillageAPI.Models.Village", null)
                        .WithMany()
                        .HasForeignKey("VillagesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DamageEffectEnemy", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.DamageEffect", null)
                        .WithMany()
                        .HasForeignKey("DamageEffectsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerraVillageAPI.Models.Enemy", null)
                        .WithMany()
                        .HasForeignKey("EnemiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnemyItem", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("DropTableID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerraVillageAPI.Models.Enemy", null)
                        .WithMany()
                        .HasForeignKey("EnemyDropTablesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryItem", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerraVillageAPI.Models.Inventory", null)
                        .WithMany()
                        .HasForeignKey("UserInventoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Clan", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Inventory", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.User", "User")
                        .WithOne("Inventory")
                        .HasForeignKey("TerraVillageAPI.Models.Inventory", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Settings", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("TerraVillageAPI.Models.Settings", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerraVillageAPI.Models.User", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.Clan", "Clan")
                        .WithMany("Members")
                        .HasForeignKey("ClanID");

                    b.Navigation("Clan");
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Village", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.User", "Owner")
                        .WithOne("Village")
                        .HasForeignKey("TerraVillageAPI.Models.Village", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FriendsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerraVillageAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Armor", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.Item", null)
                        .WithOne()
                        .HasForeignKey("TerraVillageAPI.Models.Armor", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Consumable", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.DamageEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectID");

                    b.HasOne("TerraVillageAPI.Models.Item", null)
                        .WithOne()
                        .HasForeignKey("TerraVillageAPI.Models.Consumable", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Weapon", b =>
                {
                    b.HasOne("TerraVillageAPI.Models.DamageEffect", "DamageEffect")
                        .WithMany()
                        .HasForeignKey("DamageEffectID");

                    b.HasOne("TerraVillageAPI.Models.Item", null)
                        .WithOne()
                        .HasForeignKey("TerraVillageAPI.Models.Weapon", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageEffect");
                });

            modelBuilder.Entity("TerraVillageAPI.Models.Clan", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("TerraVillageAPI.Models.User", b =>
                {
                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("Village")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
